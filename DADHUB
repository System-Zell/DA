local GameIDMain = 3475397644
local GameIDEvent = 5777228223
local GameIDW1 = 000
local Plr = game.Players.LocalPlayer
print("Script Executed "..game.PlaceId)

--[[ Notes
game.Workspace.Interactions.Nodes.Eggs

]] 

-- Var
local PlrPlot = Plr.Name.."_Plot"

-- Func

local function getModelCenter(model)
	local totalPosition = Vector3.new(0, 0, 0)
	local partCount = 0

	for _, part in pairs(model:GetDescendants()) do
		if part:IsA("BasePart") then
			totalPosition = totalPosition + part.Position
			partCount = partCount + 1
		end
	end

	if partCount > 0 then
		return totalPosition / partCount
	else
		warn("Model has no BaseParts.")
		return nil
	end
end

local function tweenToPart(player, target, speed)
	local tweenService = game:GetService("TweenService")


	local humanoidRootPart = player.Character:WaitForChild("HumanoidRootPart")

	if target:IsA("Model") then

		if target.PrimaryPart then
			target = target.PrimaryPart.Position
		else
			local centerPosition = getModelCenter(target)
			if centerPosition then
				target = centerPosition
			else
				return 
			end
		end
	else
		target = target.Position 
	end

	local distance = (target - humanoidRootPart.Position).Magnitude

	local travelTime = distance / speed

	local tweeningInformation = TweenInfo.new(travelTime, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)

	local partProperties = {Position = target}

	local tween = tweenService:Create(humanoidRootPart, tweeningInformation, partProperties)

	tween:Play()
end

function tween(Pos, Time)
	
end


if game.PlaceId == GameIDMain then
	print(PlrPlot)
	local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
	
	local Window = OrionLib:MakeWindow({Name = "üêâ Dragon Adventures Hub | Droid", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest", IntroEnabled = true, IntroText = "Loading Droid Hub"})
	
	-- Main Tab
	local MainTab = Window:MakeTab({
		Name = "Home",
		Icon = nil,
		PremiumOnly = false
	})
	
	local AutoSection = MainTab:AddSection({
		Name = "Auto Droids"
	})
	
	-- Teleport Tab
	local TeleportTab = Window:MakeTab({
		Name = "Teleport",
		Icon = nil,
		PremiumOnly = false
	})
	
	local PlotSection = TeleportTab:AddSection({
		Name = "Plots - Not Working"
	})
	
	TeleportTab:AddButton({
		Name = "TP - Home Plot",
		Callback = function()
			local Plot = game.Workspace.Interactions.Plots.Plots:FindFirstChild(PlrPlot)
			tweenToPart(Plr, Plot, 15)
			
			
			local args = {
				[1] = "Plot",
				[2] = PlrPlot
			}

			game:GetService("ReplicatedStorage").Remotes.GetTeleportRemote:InvokeServer(unpack(args))
		end    
	})
	
	-- Events Tab
	
	local EventsTab = Window:MakeTab({
		Name = "Events",
		Icon = nil,
		PremiumOnly = false
	})
	
	EventsTab:AddButton({
		Name = "TP - Events World",
		Callback = function()
			local args = {
				[1] = 5777228223,
				[2] = {}
			}

			game:GetService("ReplicatedStorage").Remotes.WorldTeleportRemote:InvokeServer(unpack(args))
		end    
	})
end

if game.PlaceId == GameIDEvent then
	local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

	local Window = OrionLib:MakeWindow({Name = "üêâ Dragon Adventures Hub | Droid | Event", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest", IntroEnabled = true, IntroText = "Loading Droid Hub"})
	
	local AutoSunDB = false
	local CollectingSun = false
	
	local MainTab = Window:MakeTab({
		Name = "Home",
		Icon = nil,
		PremiumOnly = false
	})
	
	local AutoSection = MainTab:AddSection({
		Name = "Auto Droid - Unequip all Dragons"
	})
	
	MainTab:AddToggle({
		Name = "Auto Sunflower",
		Default = false,
		Callback = function(Value)
			if Value == true then
				AutoSunDB = true
				local WaterCollected = game.Players.LocalPlayer.Data.SolsticeEvent2024.WaterEssence

				while AutoSunDB == true do
					wait(1)

					if not CollectingSun then
						CollectingSun = true

						for _, obj in pairs(workspace:GetDescendants()) do
							if obj:IsA("Attachment") and obj.Name == "WaterItemSpawnAttachment" then
								local character = game.Players.LocalPlayer.Character
								local humanoidRootPart = character.HumanoidRootPart
								local tweenService = game:GetService("TweenService")
								local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)

								if WaterCollected.Value < 800 then
									local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(obj.Position)})
									tween:Play()
									wait(1)
									local args = { [1] = obj }
									game:GetService("ReplicatedStorage").Remotes.GrabItemRemote:FireServer(unpack(args))
									print("Collected Water")
									wait(1)

								elseif WaterCollected.Value >= 800 then
									print("Attempt to water sunflowers")

									local found = false
									for _, sun in pairs(workspace:GetDescendants()) do
										if sun.Name == "SolsticeFlower" and not found then
											found = true
											local character = game.Players.LocalPlayer.Character
											local humanoidRootPart = character.HumanoidRootPart
											local tweenService = game:GetService("TweenService")
											local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
											local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(sun.Position + Vector3.new(0, 5, 0))})
											tween:Play()
											wait(1)
											for i = 1, 4 do
												print("Watering Plant: "..i)
												local args = { [1] = sun }
												game:GetService("ReplicatedStorage").Remotes.UseItemOnFlowerRemote:InvokeServer(unpack(args))
												wait(0.8)
											end
											wait(1)
											for i = 1, 2 do
												local args = {
													[1] = sun,
													[2] = i
												}

												game:GetService("ReplicatedStorage").Remotes.FlowerDropsRemote:FireServer(unpack(args))
											end

											CollectingSun = false
											break  -- Exit the loop after watering one sunflower
										end
									end
								end
							end
						end

						-- Reset the CollectingSun flag after all operations
						CollectingSun = false
					end
				end

			elseif Value == false then
				CollectingSun = false
				AutoSunDB = false
			end
		end

	})
end
